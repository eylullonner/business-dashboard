import streamlit as st
import pandas as pd
import json
from datetime import datetime
import sys
import os

# Path ayarı
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.pocketbase_client import (
    get_all_data, bulk_upload_records, test_pocketbase_connection,
    get_record_count, delete_record, test_single_record_upload,
    get_collection_schema, get_records_by_account, get_account_summary,
    delete_records_by_account
)

# Sayfa konfigürasyonu
st.set_page_config(
    page_title="Data Management",
    page_icon="📁",
    layout="wide"
)

st.title("📁 Data Management")
st.markdown("Upload, manage and view your order matching data")

# PocketBase connection test
col1, col2, col3 = st.columns([2, 1, 1])
with col3:
    if st.button("🔗 Test Connection"):
        with st.spinner("Testing connection..."):
            is_connected, message = test_pocketbase_connection()
            if is_connected:
                st.success(f"✅ {message}")
            else:
                st.error(f"❌ {message}")

# Ana sekmeler
tab1, tab2, tab3, tab4 = st.tabs(["📤 Upload Data", "📊 View Data", "🗑️ Delete Data", "🔧 Debug Tools"])

# Tab 1: Upload Data
with tab1:
    st.subheader("📤 Upload Matched Orders")

    uploaded_file = st.file_uploader(
        "Select JSON file with matched orders",
        type=['json'],
        help="Upload the JSON file generated by Order Matcher"
    )

    if uploaded_file:
        try:
            # JSON dosyasını oku
            json_data = json.loads(uploaded_file.read())

            if not isinstance(json_data, list):
                st.error("❌ JSON file should contain an array of orders")
                st.stop()

            st.success(f"✅ JSON file loaded with {len(json_data)} orders")

            # Amazon account analysis - YENİ EKLENEN
            if json_data and 'amazon_account' in json_data[0]:
                df_preview = pd.DataFrame(json_data)
                account_counts = df_preview['amazon_account'].value_counts()

                st.info("📊 **Account Breakdown in Upload:**")
                col1, col2, col3 = st.columns(3)
                for i, (account, count) in enumerate(account_counts.head(3).items()):
                    with [col1, col2, col3][i % 3]:
                        st.metric(f"Account: {account}", f"{count} orders")

                if len(account_counts) > 3:
                    with st.expander(f"View all {len(account_counts)} accounts"):
                        for account, count in account_counts.items():
                            st.write(f"• **{account}**: {count} orders")

            # Önizleme
            with st.expander("🔍 Data Preview"):
                if len(json_data) > 0:
                    sample_record = json_data[0]

                    # Amazon account vurgusu
                    if 'amazon_account' in sample_record:
                        st.write(f"**Sample Account:** {sample_record['amazon_account']}")

                    st.json(sample_record)  # İlk kaydı göster

            # Upload butonu
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                if st.button("🚀 Transfer to PocketBase", type="primary", use_container_width=True):

                    # Progress tracking
                    progress_bar = st.progress(0)
                    status_text = st.empty()


                    def update_progress(current, total, order_id):
                        progress = current / total
                        progress_bar.progress(progress)
                        status_text.text(f"Processing: {current}/{total} - {order_id}")


                    # Upload
                    with st.spinner("Uploading to PocketBase..."):
                        results = bulk_upload_records(json_data, progress_callback=update_progress)

                    # Progress tamamlandı
                    progress_bar.progress(1.0)
                    status_text.text("✅ Synchronization completed!")

                    # Sonuçları göster
                    col1, col2, col3, col4 = st.columns(4)

                    with col1:
                        st.metric("Total Records", len(json_data))
                    with col2:
                        st.metric("Added", results["added"], delta=results["added"])
                    with col3:
                        st.metric("Updated", results["updated"], delta=results["updated"])
                    with col4:
                        st.metric("Errors", results["errors"], delta=results["errors"])

                    # Hata detayları
                    if results["errors"] > 0:
                        with st.expander("❌ Error Details"):
                            for error in results["error_details"]:
                                st.error(error)

                    if results["added"] > 0 or results["updated"] > 0:
                        st.success("🎉 Data synchronization completed successfully!")

                        # Cache'i temizle
                        st.cache_data.clear()

        except json.JSONDecodeError:
            st.error("❌ Invalid JSON file format")
        except Exception as e:
            st.error(f"❌ Error reading file: {str(e)}")

# Tab 2: View Data
with tab2:
    st.subheader("📊 View Data")

    col1, col2, col3 = st.columns([2, 1, 1])

    with col1:
        total_records = get_record_count()
        st.info(f"📊 Total records in database: {total_records}")

    with col2:
        if st.button("🔄 Refresh Data"):
            st.cache_data.clear()
            st.rerun()

    with col3:
        # Account summary button - YENİ EKLENEN
        if st.button("🏪 Account Summary"):
            try:
                account_summary = get_account_summary()
                if account_summary:
                    st.json(account_summary)
                else:
                    st.info("No account data available")
            except Exception as e:
                st.error(f"Error getting account summary: {e}")

    # Veri yükleme
    try:
        data = get_all_data()

        if data:
            df = pd.DataFrame(data)

            # Account filtering - YENİ EKLENEN
            account_filter_enabled = False
            if 'amazon_account' in df.columns:
                st.markdown("#### 🏪 Account Filtering")
                col1, col2 = st.columns([2, 1])

                with col1:
                    unique_accounts = ['All Accounts'] + sorted(df['amazon_account'].unique().tolist())
                    selected_account = st.selectbox("Filter by Account:", unique_accounts)

                    if selected_account != "All Accounts":
                        df = df[df['amazon_account'] == selected_account]
                        account_filter_enabled = True
                        st.info(f"📊 Showing {len(df)} records for account: **{selected_account}**")

                with col2:
                    if st.button("📈 Show Account Stats"):
                        if selected_account != "All Accounts":
                            account_data = df[df['amazon_account'] == selected_account]
                        else:
                            account_data = df

                        if 'calculated_profit_usd' in account_data.columns:
                            total_profit = account_data['calculated_profit_usd'].sum()
                            avg_profit = account_data['calculated_profit_usd'].mean()
                            profitable_orders = (account_data['calculated_profit_usd'] > 0).sum()

                            col_a, col_b, col_c = st.columns(3)
                            with col_a:
                                st.metric("Total Profit", f"${total_profit:,.2f}")
                            with col_b:
                                st.metric("Avg Profit", f"${avg_profit:.2f}")
                            with col_c:
                                st.metric("Profitable Orders", profitable_orders)

            # Kolon seçimi
            if len(df.columns) > 10:
                # Amazon account'u default'ta dahil et
                default_columns = df.columns.tolist()[:10]
                if 'amazon_account' in df.columns and 'amazon_account' not in default_columns:
                    default_columns.insert(1, 'amazon_account')  # 2. sıraya ekle

                selected_columns = st.multiselect(
                    "Select columns to display:",
                    options=df.columns.tolist(),
                    default=default_columns
                )
            else:
                selected_columns = df.columns.tolist()

            if selected_columns:
                # Sayfalama
                page_size = st.selectbox("Records per page:", [10, 25, 50, 100], index=1)

                total_pages = (len(df) - 1) // page_size + 1

                if total_pages > 1:
                    page = st.number_input(
                        f"Page (1-{total_pages}):",
                        min_value=1,
                        max_value=total_pages,
                        value=1
                    )

                    start_idx = (page - 1) * page_size
                    end_idx = start_idx + page_size

                    df_display = df[selected_columns].iloc[start_idx:end_idx]

                    display_info = f"📄 Page {page}/{total_pages} - Records {start_idx + 1}-{min(end_idx, len(df))} / {len(df)}"
                    if account_filter_enabled:
                        display_info += f" (filtered for {selected_account})"
                    st.info(display_info)
                else:
                    df_display = df[selected_columns]

                # Tabloyu göster
                st.dataframe(df_display, use_container_width=True)

                # İndirme seçenekleri - UPDATED: Account info dahil filename
                st.markdown("#### 💾 Download Options")
                col1, col2 = st.columns(2)

                # Filename generation
                timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
                if account_filter_enabled:
                    base_filename = f"matched_orders_{selected_account}_{timestamp}"
                else:
                    base_filename = f"matched_orders_all_accounts_{timestamp}"

                with col1:
                    json_data = df.to_json(orient='records', indent=2)
                    st.download_button(
                        label="📄 Download as JSON",
                        data=json_data,
                        file_name=f"{base_filename}.json",
                        mime="application/json"
                    )

                with col2:
                    csv_data = df.to_csv(index=False)
                    st.download_button(
                        label="📊 Download as CSV",
                        data=csv_data,
                        file_name=f"{base_filename}.csv",
                        mime="text/csv"
                    )

        else:
            st.info("📊 No data available. Upload some data first.")

    except Exception as e:
        st.error(f"❌ Error loading data: {str(e)}")

# Tab 3: Delete Data
with tab3:
    st.subheader("🗑️ Delete Data")

    st.warning("⚠️ This action cannot be undone!")

    # Veri yükleme
    try:
        data = get_all_data()

        if data:
            df = pd.DataFrame(data)

            # Account-based deletion options - YENİ EKLENEN
            if 'amazon_account' in df.columns:
                st.markdown("#### 🏪 Delete by Account")

                account_counts = df['amazon_account'].value_counts()
                st.write("**Available Accounts:**")

                for account, count in account_counts.items():
                    col1, col2, col3 = st.columns([2, 1, 1])

                    with col1:
                        st.write(f"**{account}**: {count} records")

                    with col2:
                        if st.button(f"View {account}", key=f"view_{account}"):
                            account_records = get_records_by_account(account, limit=5)
                            if account_records:
                                st.write(f"**Sample records from {account}:**")
                                for i, record in enumerate(account_records[:3]):
                                    st.write(f"{i + 1}. Order ID: {record.get('amazon_orderid', 'N/A')}")

                    with col3:
                        if st.button(f"🗑️ Delete {account}", key=f"delete_{account}", type="secondary"):
                            st.session_state[f"confirm_delete_{account}"] = True

                    # Confirmation dialog
                    if st.session_state.get(f"confirm_delete_{account}", False):
                        st.error(f"⚠️ Are you sure you want to delete ALL {count} records from account '{account}'?")

                        col_a, col_b = st.columns(2)
                        with col_a:
                            if st.button(f"✅ Yes, Delete {account}", key=f"confirm_yes_{account}", type="primary"):
                                with st.spinner(f"Deleting records from {account}..."):
                                    deleted_count, error_count = delete_records_by_account(account)

                                if deleted_count > 0:
                                    st.success(f"✅ Deleted {deleted_count} records from {account}")
                                    st.cache_data.clear()
                                    del st.session_state[f"confirm_delete_{account}"]
                                    st.rerun()

                                if error_count > 0:
                                    st.error(f"❌ {error_count} records could not be deleted")

                        with col_b:
                            if st.button(f"❌ Cancel", key=f"confirm_no_{account}"):
                                del st.session_state[f"confirm_delete_{account}"]
                                st.rerun()

                st.markdown("---")

            # Silme seçenekleri
            delete_option = st.radio(
                "Select delete option:",
                ["Delete specific records", "Delete all records"]
            )

            if delete_option == "Delete specific records":
                # Master no ile silme
                master_nos = df['master_no'].tolist() if 'master_no' in df.columns else []

                if master_nos:
                    # Account info ile birlikte göster
                    if 'amazon_account' in df.columns:
                        master_options = []
                        for _, row in df.iterrows():
                            master_no = row.get('master_no', 'N/A')
                            account = row.get('amazon_account', 'N/A')
                            amazon_orderid = row.get('amazon_orderid', 'N/A')
                            display_text = f"Master #{master_no} - Account: {account} - Order: {amazon_orderid}"
                            master_options.append((master_no, display_text))

                        selected_display = st.multiselect(
                            "Select records to delete:",
                            options=[display for _, display in master_options]
                        )

                        # Extract master_nos from selected displays
                        selected_master_nos = []
                        for master_no, display in master_options:
                            if display in selected_display:
                                selected_master_nos.append(master_no)
                    else:
                        # Fallback - sadece master no
                        selected_master_nos = st.multiselect(
                            "Select records to delete (by master_no):",
                            options=master_nos
                        )

                    if selected_master_nos:
                        if st.button("🗑️ Delete Selected Records", type="primary"):
                            with st.spinner("Deleting records..."):
                                deleted_count = 0
                                error_count = 0

                                for master_no in selected_master_nos:
                                    # Master no ile ID bul
                                    record = df[df['master_no'] == master_no].iloc[0]
                                    record_id = record['id']

                                    success, message = delete_record(record_id)

                                    if success:
                                        deleted_count += 1
                                    else:
                                        error_count += 1
                                        st.error(f"Error deleting master_no {master_no}: {message}")

                                if deleted_count > 0:
                                    st.success(f"✅ {deleted_count} records deleted successfully!")
                                    st.cache_data.clear()
                                    st.rerun()

                                if error_count > 0:
                                    st.error(f"❌ {error_count} records could not be deleted")

                else:
                    st.info("No records available for deletion")

            else:  # Delete all records
                st.error("⚠️ You are about to delete ALL records!")

                confirm_text = st.text_input("Type 'DELETE ALL' to confirm:")

                if confirm_text == "DELETE ALL":
                    if st.button("🗑️ DELETE ALL RECORDS", type="primary"):
                        with st.spinner("Deleting all records..."):
                            deleted_count = 0
                            error_count = 0

                            for _, record in df.iterrows():
                                success, message = delete_record(record['id'])

                                if success:
                                    deleted_count += 1
                                else:
                                    error_count += 1

                            if deleted_count > 0:
                                st.success(f"✅ {deleted_count} records deleted successfully!")
                                st.cache_data.clear()
                                st.rerun()

                            if error_count > 0:
                                st.error(f"❌ {error_count} records could not be deleted")

        else:
            st.info("📊 No data available to delete")

    except Exception as e:
        st.error(f"❌ Error loading data for deletion: {str(e)}")

# Tab 4: Debug Tools
with tab4:
    st.subheader("🔧 Debug Tools")

    col1, col2 = st.columns(2)

    with col1:
        if st.button("🔍 Test Collection Schema", use_container_width=True):
            with st.spinner("Getting collection schema..."):
                try:
                    schema = get_collection_schema()

                    if schema:
                        st.success("✅ Schema retrieved!")

                        # Amazon account field kontrolü - YENİ EKLENEN
                        schema_fields = schema.get('schema', [])
                        has_amazon_account = any(field.get('name') == 'amazon_account' for field in schema_fields)

                        if has_amazon_account:
                            st.success("✅ amazon_account field found in schema")
                        else:
                            st.error("❌ amazon_account field NOT found in schema - Please add it!")

                        st.json(schema)
                    else:
                        st.error("❌ Could not get schema")
                except Exception as e:
                    st.error(f"❌ Schema error: {e}")

    with col2:
        if st.button("🧪 Test Single Record Upload", use_container_width=True):
            with st.spinner("Testing single record upload..."):
                try:
                    success = test_single_record_upload()

                    if success:
                        st.success("✅ Test record uploaded successfully!")
                        st.info("✅ Composite key validation (orderid + account) also works!")
                    else:
                        st.error("❌ Test record upload failed - check console for details")
                except Exception as e:
                    st.error(f"❌ Test upload error: {e}")

    # Account debugging tools - YENİ BÖLÜM
    st.markdown("#### 🏪 Account Debug Tools")

    col1, col2 = st.columns(2)

    with col1:
        if st.button("📊 Account Summary Debug", use_container_width=True):
            try:
                account_summary = get_account_summary()
                if account_summary:
                    st.success("✅ Account summary retrieved!")
                    st.json(account_summary)
                else:
                    st.warning("⚠️ No account summary available")
            except Exception as e:
                st.error(f"❌ Account summary error: {e}")

    with col2:
        test_account = st.text_input("Test Account Name:", placeholder="e.g., buyer1")
        if st.button("🔍 Test Account Records", use_container_width=True) and test_account:
            try:
                records = get_records_by_account(test_account, limit=5)
                if records:
                    st.success(f"✅ Found {len(records)} records for {test_account}")
                    for i, record in enumerate(records):
                        st.write(f"{i + 1}. Order: {record.get('amazon_orderid', 'N/A')}")
                else:
                    st.warning(f"⚠️ No records found for account: {test_account}")
            except Exception as e:
                st.error(f"❌ Account test error: {e}")

    # Show recent logs
    if st.button("📋 Show Debug Output", use_container_width=True):
        st.info("💡 Check your terminal/console where Streamlit is running for detailed debug output!")

        # Sample debug output display - UPDATED: Account info dahil
        with st.expander("Expected Debug Output Example"):
            st.code("""
DEBUG - Uploading record with keys: ['master_no', 'ebay_order_number', 'amazon_account', ...]
DEBUG - Composite key search: orderid=123-456-789, account=buyer1
DEBUG - Response status: 400
DEBUG - Field errors: {'amazon_account': {'code': 'validation_invalid_value', 'message': 'Field is required'}}
            """)

    # Show current PocketBase connection status
    st.markdown("#### 🔗 Connection Status")
    try:
        is_connected, message = test_pocketbase_connection()

        if is_connected:
            st.success(f"✅ {message}")
        else:
            st.error(f"❌ {message}")
    except Exception as e:
        st.error(f"❌ Connection test failed: {e}")

# Footer
st.markdown("---")
st.caption("📁 Data Management | Enhanced with Amazon Account Support")